// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id          String         @id @default(cuid())
    name        String         @unique
    address     String?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    UserCompany User_Company[]

    kelompokAkun     kelompokAkun[]
    NamaAkun         NamaAkun[]
    Laporan_NamaAkun Laporan_NamaAkun[]
    SubAkun          SubAkun[]
    Journal          Journal[]
}

model User {
    id          String         @id @default(cuid())
    username    String
    image       String?
    password    String
    accounts    Account[]
    sessions    Session[]
    userCompany User_Company[]
    role        Role           @default(USER)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model User_Company {
    id        String   @id @default(cuid())
    userId    String
    companyId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model kelompokAkun {
    id        String     @id @default(cuid())
    name      String
    kelasAkun KelasAkun
    companyId String
    company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    NamaAkun  NamaAkun[]
}

model NamaAkun {
    id     String         @id @default(cuid())
    posisi NormalPosition

    code           String
    name           String
    kelompokAkunId String
    kelompokAkun   kelompokAkun       @relation(fields: [kelompokAkunId], references: [id], onDelete: Cascade)
    companyId      String
    company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
    laporan        Laporan_NamaAkun[]
    SubAkun        SubAkun[]
    journalDetail  JournalDetail[]
}

model SubAkun {
    id            String          @id @default(cuid())
    code          String
    name          String
    namaAkunId    String
    namaAkun      NamaAkun        @relation(fields: [namaAkunId], references: [id], onDelete: Cascade)
    companyId     String
    company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    journalDetail JournalDetail[]
}

model Laporan_NamaAkun {
    id         String   @id @default(cuid())
    laporan    Laporan
    namaAkun   NamaAkun @relation(fields: [namaAkunId], references: [id])
    companyId  String
    company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    namaAkunId String
}

model Journal {
    id            String          @id @default(cuid())
    date          DateTime
    ref           String
    description   String
    type          JournalType
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    companyId     String
    company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    JournalDetail JournalDetail[]
}

model JournalDetail {
    id           String   @id @default(cuid())
    debit        Float
    credit       Float
    journalId    String
    namaAkunId   String
    subAccountId String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    journal      Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
    namaAkun     NamaAkun @relation(fields: [namaAkunId], references: [id], onDelete: Cascade)
    subAccount   SubAkun? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
}

enum JournalType {
    GENERAL
    ADJUSTING
    REVERSING
    CLOSING
}

enum KelasAkun {
    ASSET
    LIABILITY
    EQUITY
    REVENUE
    EXPENSE
}

enum NormalPosition {
    DEBIT
    CREDIT
}

enum Laporan {
    NERACA
    PERUBAHAN_MODAL
    LABA_RUGI
}

enum Role {
    ADMIN
    USER
}
