// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["omitApi", "relationJoins"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Company {
    id          String         @id @default(cuid())
    name        String         @unique
    address     String?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    UserCompany User_Company[]

    groupAccount   GroupAccount[]
    account        Account[]
    Report_Account Report_Account[]
    SubAcount      SubAccount[]
    Journal        Journal[]
}

model User {
    id          String         @id @default(cuid())
    username    String
    image       String?
    password    String
    userCompany User_Company[]
    role        Role           @default(USER)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model User_Company {
    id        String   @id @default(cuid())
    userId    String
    companyId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GroupAccount {
    id           String       @id @default(cuid())
    name         String
    code         String
    accountClass AccountClass
    companyId    String
    company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    account      Account[]
}

model Account {
    id             String           @id @default(cuid())
    posisi         NormalPosition
    code           String
    name           String
    groupAccountId String
    groupAccount   GroupAccount     @relation(fields: [groupAccountId], references: [id], onDelete: Cascade)
    companyId      String
    company        Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    report         Report_Account[]
    subAccount     SubAccount[]
    journalDetail  JournalDetail[]
}

model SubAccount {
    id            String          @id @default(cuid())
    code          String
    name          String
    accountId     String
    account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
    companyId     String
    company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    journalDetail JournalDetail[]
}

model Report_Account {
    id        String   @id @default(cuid())
    report    Laporan
    account   Account  @relation(fields: [accountId], references: [id])
    companyId String
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    accountId String

    @@unique([companyId, report, accountId])
}

model Journal {
    id            String          @id @default(cuid())
    date          DateTime
    ref           String
    description   String
    type          JournalType
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    companyId     String
    company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
    JournalDetail JournalDetail[]
}

model JournalDetail {
    id           String      @id @default(cuid())
    debit        Float
    credit       Float
    journalId    String
    accountId    String
    subAccountId String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    journal      Journal     @relation(fields: [journalId], references: [id], onDelete: Cascade)
    account      Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
    subAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
}

enum JournalType {
    GENERAL
    ADJUSTING
    REVERSING
    CLOSING
}

enum AccountClass {
    ASSET
    LIABILITY
    EQUITY
    REVENUE
    EXPENSE
}

enum NormalPosition {
    DEBIT
    CREDIT
}

enum Laporan {
    NERACA
    PERUBAHAN_MODAL
    LABA_RUGI
}

enum Role {
    OWNER
    ADMIN
    USER
}
