generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              String            @id @default(cuid())
  name            String            @unique
  address         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deleted         DateTime?
  account         Account[]
  customers       Customer[]
  DefaultAccount  DefaultAccount[]
  GeneralLedger   GeneralLedger[]
  groupAccount    GroupAccount[]
  InitialProduct  InitialProduct[]
  Journal         Journal[]
  PaymentMethod   PaymentMethod[]
  Product         Product[]
  purchases       Purchase[]
  PurchaseInvoice PurchaseInvoice[]
  receiveItems    ReceiveItem[]
  SalesInvoice    SalesInvoice[]
  SalesPayment    SalesPayment[]
  SalesPerson     SalesPerson[]
  SubAcount       SubAccount[]
  suppliers       Supplier[]
  UserCompany     User_Company[]
  PurchasePayment PurchasePayment[]
}

model User {
  id          String         @id @default(cuid())
  username    String
  image       String?
  password    String
  role        Role           @default(USER)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deleted     DateTime?
  userCompany User_Company[]
}

model User_Company {
  id        String    @id @default(cuid())
  userId    String
  companyId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupAccount {
  id           String       @id @default(cuid())
  name         String
  code         String
  accountClass AccountClass
  companyId    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deleted      DateTime?
  account      Account[]
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([code, companyId])
}

model Account {
  id             String          @id @default(cuid())
  posisi         NormalPosition
  code           String
  name           String
  currentBalance Int             @default(0)
  groupAccountId String
  companyId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deleted        DateTime?
  reports        Laporan[]
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  groupAccount   GroupAccount    @relation(fields: [groupAccountId], references: [id], onDelete: Cascade)
  defaultAccount DefaultAccount?
  GeneralLedger  GeneralLedger[]
  journalDetail  JournalDetail[]
  subAccount     SubAccount[]

  @@unique([code, companyId])
}

model SubAccount {
  id            String          @id @default(cuid())
  code          String
  name          String
  accountId     String
  companyId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deleted       DateTime?
  journalDetail JournalDetail[]
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([code, companyId])
}

model Journal {
  id              String           @id @default(cuid())
  date            DateTime
  ref             String
  description     String?
  type            JournalType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  companyId       String
  deleted         DateTime?
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  JournalDetail   JournalDetail[]
  ReceiveItem     ReceiveItem?
  PurchaseInvoice PurchaseInvoice?
  SalesInvoice    SalesInvoice?
  SalesPayment    SalesPayment?
  PurchasePayment PurchasePayment?
}

model JournalDetail {
  id            String          @id @default(cuid())
  debit         Int
  credit        Int
  journalId     String
  accountId     String
  subAccountId  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deleted       DateTime?
  GeneralLedger GeneralLedger[]
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  journal       Journal         @relation(fields: [journalId], references: [id], onDelete: Cascade)
  subAccount    SubAccount?     @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
}

model Supplier {
  id           String     @id @default(cuid())
  nama         String
  alamat       String?
  companyId    String
  deleted      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  products     Product[]
  purchases    Purchase[]
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  idCard       String     @default("")
  kode         String     @default("")
  pic_name     String     @default("")
  phone_number String     @default("")
  email        String     @default("")
  fax          String     @default("")
  website      String     @default("")
  kode_pos     String     @default("")

  @@unique([nama, companyId])
}

model Customer {
  id           String         @id @default(cuid())
  nama         String
  alamat       String?
  companyId    String
  deleted      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  SalesInvoice SalesInvoice[]

  @@unique([nama, companyId])
}

model Product {
  id                 String               @id @default(cuid())
  name               String
  companyId          String
  deleted            DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  supplierId         String
  currentQuantity    Int
  averagePrice       Int
  sellingPrice       Int                  @default(0)
  buyingPrice        Int                  @default(0)
  initialProduct     InitialProduct?
  company            Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier           Supplier             @relation(fields: [supplierId], references: [id])
  purchaseDetails    PurchaseDetail[]
  SalesInvoiceDetail SalesInvoiceDetail[]
}

model InitialProduct {
  id        String    @id @default(cuid())
  deleted   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companyId String
  quantity  Int
  price     Int
  productId String    @unique
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])
}

model Purchase {
  id                  String             @id @default(cuid())
  ref                 String
  purchaseDate        DateTime
  totalBeforeDiscount Int
  netTotal            Int
  note                String?
  discount            Int
  supplierId          String
  ppn                 Int
  companyId           String
  deleted             DateTime?
  status              TRANSACTION_STATUS @default(DIPROSES)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  dueDate             DateTime           @default(now())
  company             Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier            Supplier           @relation(fields: [supplierId], references: [id])
  purchaseDetail      PurchaseDetail[]
  ReceiveItem         ReceiveItem[]
}

model PurchaseDetail {
  id                  String              @id @default(cuid())
  purchaseId          String
  productId           String
  quantity            Int
  price               Int
  discount            Int
  totalBeforeDiscount Int
  ppn                 Int                 @default(0)
  discount_percent    Int                 @default(0)
  netTotal            Int
  totalReceive        Int                 @default(0)
  deleted             DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  product             Product             @relation(fields: [productId], references: [id])
  purchase            Purchase            @relation(fields: [purchaseId], references: [id])
  receiveItemDetail   ReceiveItemDetail[]
}

model PurchasePayment {
  id                String          @id @default(cuid())
  paymentDate       DateTime
  purchaseInvoiceId String
  amount            Int
  note              String?
  deleted           DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentMethodId   String
  paymentMethod     PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id])
  companyId         String
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  journalId         String?         @unique
  journal           Journal?        @relation(fields: [journalId], references: [id])
}

model ReceiveItem {
  id                String              @id @default(cuid())
  purchaseId        String
  receiveDate       DateTime
  deleted           DateTime?
  note              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  companyId         String
  totalAmount       Int                 @default(0)
  ref               String
  purchaseInvoice   PurchaseInvoice[]
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchase          Purchase            @relation(fields: [purchaseId], references: [id])
  receiveItemDetail ReceiveItemDetail[]
  journalId         String?             @unique
  journal           Journal?            @relation(fields: [journalId], references: [id])
}

model ReceiveItemDetail {
  id               String         @id @default(cuid())
  receiveId        String
  productId        String
  quantity         Int
  deleted          DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  purchaseDetailId String
  note             String?
  purchaseDetail   PurchaseDetail @relation(fields: [purchaseDetailId], references: [id])
  receiveItem      ReceiveItem    @relation(fields: [receiveId], references: [id])
}

model PurchaseInvoice {
  id               String                     @id @default(cuid())
  date             DateTime
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  deleted          DateTime?
  receiveId        String
  companyId        String
  paymentStatus    TRANSACTION_PAYMENT_STATUS @default(UNPAID)
  totalPayment     Int                        @default(0)
  ref              String?
  note             String?
  totalAfter       Int                        @default(0)
  totalBefore      Int                        @default(0)
  totalDiscount    Int                        @default(0)
  totalTax         Int                        @default(0)
  company          Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  receiveItem      ReceiveItem                @relation(fields: [receiveId], references: [id])
  purchasePayments PurchasePayment[]
  journalId        String?                    @unique
  journal          Journal?                   @relation(fields: [journalId], references: [id])
}

model PaymentMethod {
  id               String            @id @default(cuid())
  name             String
  accountNumber    String?
  amount           Int               @default(0)
  deleted          DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchasePayments PurchasePayment[]
  SalesPayment     SalesPayment[]
}

model SalesInvoice {
  id                 String                     @id @default(cuid())
  date               DateTime
  ref                String
  suratJalan         String?
  dueDate            DateTime
  customerId         String
  note               String?
  totalBefore        Int
  tax                Int
  discount           Int                        @default(0)
  totalAfter         Int
  salesPersonId      String
  updatedAt          DateTime                   @updatedAt
  createdAt          DateTime                   @default(now())
  companyId          String
  deleted            DateTime?
  cogs               Int
  status             TRANSACTION_PAYMENT_STATUS @default(UNPAID)
  totalPayment       Int                        @default(0)
  company            Company                    @relation(fields: [companyId], references: [id])
  customer           Customer                   @relation(fields: [customerId], references: [id])
  salesPerson        SalesPerson                @relation(fields: [salesPersonId], references: [id])
  salesInvoiceDetail SalesInvoiceDetail[]
  SalesPayment       SalesPayment[]
  journalId          String?                    @unique
  journal            Journal?                   @relation(fields: [journalId], references: [id])
}

model SalesInvoiceDetail {
  id             String       @id @default(cuid())
  salesInvoiceId String
  productId      String
  quantity       Int
  price          Int
  discount       Int
  tax            Int
  totalBefore    Int
  totalAfter     Int
  createdAt      DateTime     @default(now())
  deleted        DateTime?
  updatedAt      DateTime     @updatedAt
  product        Product      @relation(fields: [productId], references: [id])
  salesInvoice   SalesInvoice @relation(fields: [salesInvoiceId], references: [id])
}

model SalesPerson {
  id           String         @id @default(cuid())
  name         String
  companyId    String
  deleted      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  salesInvoice SalesInvoice[]
  company      Company        @relation(fields: [companyId], references: [id])
}

model SalesPayment {
  id              String        @id @default(cuid())
  date            DateTime
  salesInvoiceId  String
  paymentMethodId String
  amount          Int
  deleted         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  companyId       String
  company         Company       @relation(fields: [companyId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  salesInvoice    SalesInvoice  @relation(fields: [salesInvoiceId], references: [id])
  journalId       String?       @unique
  journal         Journal?      @relation(fields: [journalId], references: [id])
}

model DefaultAccount {
  id        String               @id @default(cuid())
  accountId String               @unique
  companyId String
  category  TRANSACTION_CATEGORY
  deleted   DateTime?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  account   Account              @relation(fields: [accountId], references: [id])
  company   Company              @relation(fields: [companyId], references: [id])
}

model GeneralLedger {
  id              String        @id @default(cuid())
  accountId       String
  journalDetailId String
  runningBalance  Int
  companyId       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         DateTime?
  Account         Account       @relation(fields: [accountId], references: [id])
  Company         Company       @relation(fields: [companyId], references: [id])
  JournalDetail   JournalDetail @relation(fields: [journalDetailId], references: [id])
}

enum JournalType {
  GENERAL
  ADJUSTING
  REVERSING
  CLOSING
}

enum AccountClass {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum NormalPosition {
  DEBIT
  CREDIT
}

enum Laporan {
  NERACA
  PERUBAHAN_MODAL
  LABA_RUGI
}

enum Role {
  OWNER
  ADMIN
  USER
}

enum TRANSACTION_STATUS {
  SELESAI
  DIANTAR_SEBAGIAN
  DIPROSES
}

enum TRANSACTION_CATEGORY {
  PERSEDIAAN
  PENJUALAN
  RETUR_PENJUALAN
  DISKON_PENJUALAN
  PEMBAYARAN_PENJUALAN
  PEMBELIAN
  RETUR_PEMBELIAN
  DISKON_PEMBELIAN
  LABA_DITAHAN
  EKUITAS
  PIUTANG_USAHA
  HUTANG_USAHA
  HPP
  PPN_MASUKAN
  PPN_KELUARAN
}

enum TRANSACTION_PAYMENT_STATUS {
  PAID
  UNPAID
  PARTIAL
}

enum PaymentStatus {
  PAID
  REFUND
  HPP
}
