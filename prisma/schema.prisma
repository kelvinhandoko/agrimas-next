// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id           String         @id @default(cuid())
    name         String
    address      String?
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    User_Company User_Company[]
}

model User {
    id          String         @id @default(cuid())
    username    String
    password    String
    image       String?
    accounts    Account[]
    sessions    Session[]
    userCompany User_Company[]
    role        Role           @default(USER)
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
}

model User_Company {
    id        String   @id @default(cuid())
    userId    String
    companyId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    ADMIN
    USER
}
